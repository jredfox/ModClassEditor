TODONOW-DPI-FIX:
- Fix LaunchWrapperTransformer not respecting config's cachedClasses
- 1.5.2, 1.6.1, 1.6.2, 1.6.3, 1.6.4 works
- Fix DpiFixWrapper when ClassLoader weirdness occurs
- Recompile X64 (win 7 and windows 8.1+) natives for Windows to stop mcafee from freaking out

TODO FoxyRetroMDK:
- Fix 1.1 - 1.2.5 no longer working due to BS security updates

TODONOW-EVILNOTCHLIB:
- Fix Resource Leaks in EvilNotchLib
- Update to LaunchClassLoaderFix V2.1.0

cpw.mods.fml.common.DummyModContainer
- override metadata entirely configured before the duplicate mods exception

cpw.mods.fml.common.modloader.ModLoaderModContainer
- override the modid before return

cpw.mods.fml.common.FMLModContainer
- override the desc found before return

public boolean deDuplicateModIds
- changes the modid dynamically to prevent conflict "modid" --> "modid_<int>" where int is the generated number for the first free modid string

TODO DPI-FIX:
- Recompile X64 (win 7 and windows 8.1+) natives for Windows to stop mcafee from freaking out

DPI-Fix ChangeLog 1.6.0:
- Fixed MC 1.5x Dedicated Server not being visible when the java agent was active
- Fixed MC 1.5x Dedicated Server isClient is true when it's a server
- Fixed MC 1.5x GameModeLib#getFileFromClass returning null sometimes
- Fixed MC 1.5x not removing @Mod.EventHandler from DpiFixModLegacy I have no idea how it wasn't crashing before
- Fixed Triggering Loading ModContainer Class by calling ForgeVersion we now use ForgeVersionProxy a brand new API (SpongeForge and Mod Class Editor Compat)
- Fixed LaunchClassLoaderFix not applying all class loaders if the OpenJDK IMPL didn't provide unqiue identity hashcode per object instance even though java 7 and below specifications required it and even use to represent the memory address
- Fixed LaunchClassLoaderFix Verify not working for non instances of LaunchClassLoader
- Fixed LaunchClassLoaderFix not supporting parent ClasssLoaders
- Fixed LaunchClassLoaderFix Technic's resources and pngMap memory leak in LaunchWrapperTransformer only. Due to forge's RelaunchClassLoader#findClass for MC 1.5x and below public API expecting to use cached classes for modders we cannot fix it. It would cause a class to redefine it twice causeing major issues
- Fixed LaunchClassLoaderFix patching LaunchClassLoader#cachedClasses when MC Version < 1.12.2! this resulted in mod incompatabilities and false positive ClassNotFoundExceptions
- Fixed MC 1.6x Not Removing @Mod.EventHandler from modloadcomplete(FMLLoadCompleteEvent) this would make forge print an error. The annotation will stay for 1.7.2 or higher as intended
- Fixed MC 1.6x and below running loadComplete every time a world starts not just the first time
- Optimized GETSTATIC Field calls it now gets the forge version field one time per method inside the transformers
- Cleaned up and Optimized code to use one GETSTATIC field per method for each majorVersion, minorVersion == 10, majorVersion == 11, majorVersion >= 10, majorVersion < 9 etc...
- Added Config Option LaunchClassLoaderFix.StrictMode. When auto it becomes true for 1.5x or below else auto resolves to false. If you encounter issues in 1.6 or higher then turn it to true and report the issue. if 1.5x And below I recommend leaving it on auto but it can proably work with any class loader including forge's RelaunchClassLoader
- Added Config Option LaunchClassLoaderFix.cachedClasses. When auto it becomes true for 1.12.2 or above else auto resolves to false. It's only safe to set this to true in MC 1.12.2 or above because mods like codechickencore for < 1.8 used findClass directly instead of loadClass resulting in ClassNotFoundExceptions if it was already loaded
- Added -Dclfix.strict when present overrides the Config option of LaunchClassLoaderFix.StrictMode
- Added -Dclfix.cachedClasses when true patches LaunchClassLoader#cachedClasses or any custom class loader's cachedClasses Map<String, Class> but it's generally not safe to patch unless your on MC 1.12.2 or above
- Added jredfox.clfix.FindClass mini program Accessible via command line Example java -cp <dpifix.jar> jredfox.clfix.FindClass "<dir>". This will help you decide if your modpack is safe to turn on cachedClasses config option or not. AKA almost never as modpacks almost always contain code chicken core

TODO 2:
- Configurable Modids per class
- Support Object Field Editing Assuming they have the Instance of the Object
- Support Editing Static Arrays for opperations replace, append, and grow
- Wildcards support '|' for or and '!' for not
- Variables with incremental value in Main JSON that can be used in either value or values tag. This is so we can just say "@ID" instead of "0" then "1" then "2" because id will say it is 0 with increment of 1
- Index Opperations for both array "index" and ASM injection point "occurance" and "shift" and "index" for FindAndReplace examples: "0-(end - 1)", "(end+1)", "(start+5)-(end*start+3)" opperations supports +, -, *, % and will go from left to right with the index base being defined by the starting number. Variable support included?
- MCEGen support dumping arrays into their own individual file if configured to by ModClassEditor.json
- Test Obfuscated and what has to change

TODO 3:
- Fields
- Universal Configureable Annotations!
- Find and Replace with advanced features like increment id search and increment value
- Change Params of methods
- Change Params of method instructions
- MCWriter 2 (Backported and or re-written version of MCWriter from EviLNotchLib)
- Support Static Arrays 2d - 12d

ChangeLog 0.11.0:
- Added @Mod and modid Configuration (Currently only edits the class and can only be used by dumping the class and modding the jar)
- Added @NetworkMod Configuration
- Added ForgeVersionProxy to get the forge's version without loading ForgeVersion or the ModContainer class

ChangeLog 0.10.0:
- Fixed Duplicate Injection(Insertion) Points not merging when AFTER Instruction A was the same place as BEFORE instruction B
- Fixed Injection(Insertion) Point Order being screwed up when AFTER Instruction A was the same place as BEFORE instruction B
- Fixed Label Injection for when Opperation was BEFORE and we either never shifted backwards or the shiftTo was EXACT
- Fixed Label Injection for when the point was a FrameNode and previous point was a Label or Line.
- Optimized Configure Main Loop
- Optimized Lookup for CachedInsertionPoint
- Optimized Slightly MCECoreUtils#getFirstCtrInsn

ChangeLog 0.9.1:
- Fixed MCEGen exceeding bytecode limit for PreInit, Init, and PostInit checks. It now generates one dynamic checker per class instead of one for all classes. Supports up to 65,000 classes now
- Fixed MCEGen PreInit, Init, and PostInit "public static void init()" method containing "this" as a local variable when it's a static method
- Fixed Constructor Checking owner#isEmpty twice instead of using an if else block

ChangeLog 0.9.0:
- Added Ability to set custom fields of another class. For example Minecraft#debugFPS can get set in Test's <clinit>. TYPE must be specified or it will not work
- Added Auto AT for custom fields of another class
- Added Interchangeability of '/' to '.' for the "ModClasses" "owner" "class" tags

ChangeLog 0.8.1:
- Fixed Duplicate Dynamic Setters for the same CachedInsertionPoint we now use Map<CachedInsertionPoint, MethodNode> for dynamic setters it's also faster
- Fixed No-Issue Missing Break in MCECoreUtils#genStaticArray for cases 'WRAPPED_CHAR' and 'CHAR'. Since it was the last case no bug ever happened
- Optimized Slightly Main Configure loop as MCEField#genDynamicSetter returns void now (nothing)

ChangeLog 0.8.0:
- Added Dynamic Setters to prevent exceeding bytecode limit of 65535 bytes per method
- Added Config Option to Disable Dynamic Setter Methods and revert to pure injections instead of wrappers(Dynamic Setters)
- Fixed Possible NullPointerExceptions in MCECoreUtils#getLastReturn as ASM 4 seems to love to put null indexes into InsnList#toArray
- Fixed MCEGen possibly exceeding the bytecode limit of 65535 bytes per method
- Fixed MCEGen not using labels for each line of code for MCEGen#capValue & MCEGen#saveChanges
- Fixed Inversion Injection Bugs

ChangeLog 0.7.2:
- Fixed Injection Point when opperation was 'AFTER' shiftTo was 'LABEL' and next insn was a FrameNode and after was LineNumberNode
- Fixed Injection Point Improperly shifting to LineNumberNode when opperation was 'AFTER' shiftTo was 'LABEL' and the InsnTypes was not equal to LabelNode. "after:label:21" was ok but "OPCODE BIPUSH" wasn't when shiftTo was 'LABEL'
- Small Cleanup in MCEField#capture

ChangeLog 0.7.1
- Fixed Injecting Code Before LineNumberNode when shiftTo was 'LABEL' and Opperation was 'AFTER'. It's alot more safer and expected to inject after LineNumberNode
- Fixed Label Injection Mutation Issue
- Fixed Label Injection for insertion of before / after logic
- Fixed Java's JIT Not optimizing Code while setting fields due to no LabelNode
- Added Config Option to disable Label Injection Either for self debug on your ModClassEditor.JSON or you run into a bug. If it's a bug please report to github.com/jredfox/ModClassEditor/issues

ChangeLog 0.7.0:
- Refactored & Cleaned Codebase
- Fixed Mutation Issue with ASM Injection Points but not Label Indexes we have disabled label insertion for now again
- Fixed Possible NullPointerException With Opcode ASM Injection Points
- Optimized Main Configure Loop
- Optimized Core Utilities toByteArray to check only the cached boolean for asm.dump
- Added Support for IincInsnNode on ASM Injection Points
- Added Config Option ASM Dump default is false
- Added Config Option ASM Dump Original default is false
- Added Config Option Batch Load default is true

Known Bugs 0.6.0:
- Mutation Caused by reading the same ASM Injection points as we are writing to will directly interfere with ASM Injection Point & Label Detection
For example if you want the point of "IntInsnNode, BIPUSH, 128" And your occuranse is set to 1 if a previous injection from the mod generates that your index will now be incorrect
- Labels Insertion on MCE has been disabled this effects JIT(Java's Just In Time Compiler) Optimizations. This is to allow label indexing to work for now :(

ChangeLog 0.6.0:
- Added ASM Injection Points [Opcode, InsnNode, IntInsnNode, VarInsnNode, JumpInsnNode, TypeInsnNode, LdcInsnNode, FieldInsnNode, MethodInsnNode, LabelNode]
- Added New Optional JSONObject Injection Point format with prefix name of either "insert" or "inject". 
- "point" is the injection(insertion) Point. Prefixed with opperation of 'before' or 'after'. Then it's either Label:<Int> or ASM injection Point.
- "occurance" The Indexed Occurance of the point. How many times does this match starting at 0 starting before we know it's the actual point. For Example IntInsnNode BIPUSH 60 may happen multiple times in one method
- "shift" The amount of Instructions to shift to backwards(before) or forwards(after). if "shiftTo" is LINE and "shift" value is 1 then we shift two times as it's an index based number;
- "shiftTo" The Type of Instructions we are shifting twords. Values 'LINE' = LineNumberNode, 'LABEL' = LabelNode and 'EXACT' = (Exact Amount of actual Instructions) to shift twords.. let's say "shiftTo" is LINE and "shift" is 0 and the opperation is before. We will shift backwards to the first LineNumberNode after the first match of the point has been found
Warning EXACT will oftent result in crashes if the END USER doesn't know what they are doing or understand safe places to inject code into. Most of the time it's after an method invocation and the next instruction is a label node or right after a LineNumberNode

- Example JSON
			"insert":
			{
				"point": "before, label:33",
				"occurrence": "0",
				"shift": "0",
				"shiftTo": "LINE"
			}
			"inject":
			{
				"point": "AFTER:MethodInsn, INVOKEVIRTUAL, \"java/io/PrintStream\", \"println\", \"(I)V\", false",
				"occurrence": "0",
				"shift": "1",
				"shiftTo": "EXACT"
			}

ChangeLog 0.5.2:
- Fixed inject opperation "before" not injecting LineNumberNode in the correct order
- Fixed inject opperation "before" with Constructors
- Fixed finding only one method when the descriptor had wild cards and the method didn't
- Added looser parsing for "name, desc, inject, method, type" parsing from JSON in case they had whitespaces by accident. Can't be done with values though

ChangeLog 0.5.1:
- Fixed Mod Throwing NumberFormatException when a number was parsed that wasn't a number it now quietly returns 0
- The Mod makes sure that it is thrown into the coremods folder and not the mods folder now by checking if the coremod has loaded

ChangeLog 0.5.0:
- Added null support for (Character, Boolean, Short, Integer, Long, Float, Double, String)
- Added null support for Static Arrays (Character[], Boolean[], Short[], Integer[], Long[], Float[], Double[], String[])
- Added keyword start to represent index 0 for all array operations

ChangeLog 0.4.0:
- Cleaned up & Optimized code (Re-Wrote alot of the code into clean readable methods and even moved data to DataType ENUM)
- DataType Enum has alot more information needed to write bytecode now
- Added Support for char, Character, char[], Character[]
- Fixed MCEGen memory leak past post init as it's no longer needed past that stage

ChangeLog 0.4.0 Pre-1:
- Added support for Static Arrays [String[], byte[], boolean[], short[], int[], long[], float[], double[], Byte[], Short[], Integer[], Long[], Float[], Double[] ]
- Added Static Array opperation fill when values size is 1 and index is in range of x-y for example: "0-end" example2: "0-3" allows incrementing the value after each index
- Added Static Array operration set when values size is 1 and index is specified as a fixed integer(not a ranged value)
- Added Static Array opperation insert when values size is greater then 1
- Added Bytecode Generation of Static Arrays of all supported data types. Won't be used as it will trigger the bytecode limit of 65535 bytes
- Added Large array support which triggers when the static array is past 10 indexes (0-10) tested with int[Short#MAX_VALUE + 1]
- Added LabelNode ASM 4x Compatible (Forces a new LabelNode by creating a new LineNumberNode with the line number of 0)
- Fixed JIT not optimizing classes due to lack of LabelNode for both MCEGen and MCEObj

ChangeLog 0.3.1:
- Added Wildcards for doing multiple methods at once using "*" and "?" wildcards for both Method names and Descriptors

