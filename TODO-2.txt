TODONOW:
- static array replace

TODO 2:
- Support Static Array Operation replace
- Support Editing Static Arrays for opperations append, and grow
- Support null injection for Strings and Wrapper Primatives
- Support Injection Points with Actual ASM injection points for before or after them including Line Numbers or RETURN
- Support Object Field Editing Assuming they have the Instance of the Object
- Dynamic Setter methods for before / after and when enabled per custom injection point
- Investigate proper solution for fields whose values need to be edited inside another class that is not where the field is loaded including

TODO 3:
- Fields
- Find and Replace with advanced features like increment id search and increment value
- Change Params of methods
- Change Params of method instructions
- MCWriter 2 (Backported and or re-written version of MCWriter from EviLNotchLib)
- Support Static Arrays 2d - 12d

ChangeLog 0.4.0:
- Cleaned up & Optimized code (Re-Wrote alot of the code into clean readable methods and even moved data to DataType ENUM)
- DataType Enum has alot more information needed to write bytecode now
- Added Support for char, Character, char[], Character[]
- Fixed MCEGen memory leak past post init as it's no longer needed past that stage

ChangeLog 0.4.0 Pre-1:
- Added support for Static Arrays [String[], byte[], boolean[], short[], int[], long[], float[], double[], Byte[], Short[], Integer[], Long[], Float[], Double[] ]
- Added Static Array opperation fill when values size is 1 and index is in range of x-y for example: "0-end" example2: "0-3" allows incrementing the value after each index
- Added Static Array operration set when values size is 1 and index is specified as a fixed integer(not a ranged value)
- Added Static Array opperation insert when values size is greater then 1
- Added Bytecode Generation of Static Arrays of all supported data types. Won't be used as it will trigger the bytecode limit of 65535 bytes
- Added Large array support which triggers when the static array is past 10 indexes (0-10) tested with int[Short#MAX_VALUE + 1]
- Added LabelNode ASM 4x Compatible (Forces a new LabelNode by creating a new LineNumberNode with the line number of 0)
- Fixed JIT not optimizing classes due to lack of LabelNode for both MCEGen and MCEObj

ChangeLog 0.3.1:
- Added Wildcards for doing multiple methods at once using "*" and "?" wildcards for both Method names and Descriptors

